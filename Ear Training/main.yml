---
include:
  - intents.yml
  - slots.yml
  - tests.yml
scenario:
  name: 'Ear Training'
  locale: en-US
  category: EDUCATION_AND_REFERENCE
  invocation: 'Ear Training'
  examplePhrases:
    - 'Alexa, open ear Training'
    - 'Alexa, start ear training'
  reprompts:
    - " Sorry, can you say that again? "
    - " I couldn't hear you, try again"
  steps:


    
    - name: Initial step
      actions:
      - compareContext:
          var: '{{repeatedUser}}'
          is_equal: true
     # we check whether repeatedUser variable is 1 and if yes -> it is a repeated user
     # if no -> it is a new one
      next:
          'true': Returning User
          'false': Initial step for new user
   
   
   
    - name: Initial step for new user
      actions:
       - set: 'repeatedUser = true'
     # Randomize the output! Our ears like variety.
       - sendText:  ' {{ random(["Hey!", "Hello!"]) }}'
       - sendText: >
                 "It looks like you're new here! Welcome! This skill will help you to train your ears."
                 <break time="1s"/>
                 " Alexa will play random intervals. Its up to you to identify them by their interval names,"
                 "For example you can say, 'major third' or, 'perfect fifth'."
                 <break time="1s"/>
                 You can say score at anytime to hear your score"
                 <break time="1s"/>
                 "If you get confused, you can say help to get more instructions."
                 <break time="1s"/>
                 "Are you ready to begin?"
                 
       - getInput:
       
      next:
           ok_great: Interval Setup
           AMAZON.CancelIntent: Exit
           AMAZON.StopIntent: Exit
           AMAZON.HelpIntent: Help
        # Catch all is the possibility to handle unexpected user input. Don't forget to implement it in every
        # step where you ask for the user input. Here maybe it is better not to exit but to ask again
        # or clarify.
           catch_all: Exit
     
    - name: Returning User
      actions:
       
        - sendText: ' Welcome  back to ear training! Random intervals will play. Do your best to identify them. '
        - sendText: ' Do you want to begin? '
        - getInput:
      next:
        ok_great: Interval Setup
        no_q: Exit
        
        
    - name: Interval Setup
      actions:
         # This set has links to the 12 notes of the piano.
        - set: >
            interval = [
              { 'question': 'c4',
                  'correct_answer': 'unison'
                },
              { 'question': 'c-4',
                  'correct_answer': 'minor second'
                },
              { 'question': 'd4', 
                  'correct_answer': 'major second'
                },
              { 'question': 'd-4',
                  'correct_answer': 'minor third'
                },
              { 'question': 'e4',
                  'correct_answer': 'major third'
                },
              { 'question': 'f4',
                  'correct_answer': 'perfect fourth'
                },
              { 'question': 'f-4',
                  'correct_answer': 'tritone'
                },
              { 'question': 'g4', 
                  'correct_answer': 'perfect fifth'
                },
              { 'question': 'g-4',
                  'correct_answer': 'minor sixth'
                },
              { 'question': 'a4',
                  'correct_answer': 'major sixth'
                },
              { 'question': 'a-4',
                  'correct_answer': 'minor seventh'
                },
              { 'question': 'b4',
                  'correct_answer': 'major seventh'
                },
              { 'question': 'c5',
                  'correct_answer': 'octave'
                },
            ]
       
        # A variable to hold the interval difference
        - set: 'int_difference = 1'
        - set: 'int_difference = 0'
        # Sorry - but to set an initial score we need to first set it to 1 and then to 0 - it's a Bug. We're on it.
        # (score / counter) *100 = percentage
        - set: 'score = 1'
        - set: 'score = 0'
        - set: 'counter = 1'
        - set: 'counter = 0'
        - set: 'percentage = 1'
        - set: 'percentage = 0'
        - set: 'testAnswer = "f"'
      next: Question

    - name: Question
      actions:
        # Enter the total number of questions in the random function
        # We will save the random number in the last_random_question variable
        - set: 'first_random_interval = random(12)'
        - set: 'second_random_interval = random(12)'
        # Finds the distance between intervals and sets it to the variable
        - set: 'int_difference = first_random_interval - second_random_interval'
        - set: 'testAnswer = interval[int_difference | abs].correct_answer | lower'
        # Then use this variable as a key to the array we set in the Initial Step
       
        # This plays 2 random intervals on the piano
        - sendText: >  
               " Heres an interval. "
               <audio src="https://onlinepiano1.s3-us-west-1.amazonaws.com/{{ interval[first_random_interval].question }}.mp3"/>
               <audio src="https://onlinepiano1.s3-us-west-1.amazonaws.com/{{ interval[second_random_interval].question }}.mp3"/>
       
        - getInput:      
      next:
        answer_intent: Check Answer
        next_q: Question
        repeat_q: Repeat
        
        
      

    - name: Check Answer
      # Check if the answer was correct
      when: 'answer == interval[int_difference | abs].correct_answer'
      actions:
        - set: 'counter = counter + 1'
        - set: 'score = score + 1'
        - set: 'percentage = (score / counter) * 100'
        - sendText: '{{ random(["Great!", "Perfect!", "Way to go!", "Nice!", "Thats correct!"]) }}'
        - sendText: >
                    {% if counter % 10 == "0" %} "You have scored {{ percentage | round }} percent. "{% endif %}
        #
        - set: 'first_random_interval = random(12)'
        - set: 'second_random_interval = random(12)'
        - set: 'int_difference = first_random_interval - second_random_interval'
        - set: 'testAnswer = interval[int_difference | abs].correct_answer | lower'
        #
        - sendText: >  
              {% if counter % 5 == "0" %}  " Heres your next interval. " {% endif %}
               <audio src="https://onlinepiano1.s3-us-west-1.amazonaws.com/{{ interval[first_random_interval].question }}.mp3"/>
               <audio src="https://onlinepiano1.s3-us-west-1.amazonaws.com/{{ interval[second_random_interval].question }}.mp3"/>

        - getInput:
      next: 
        answer_intent: Check Answer
        next_q: Next Question
        else: Incorrect Answer
        repeat_q: Repeat
        
        
        

    - name: Incorrect Answer
      actions:
        - set: 'counter = counter + 1'
        - sendText: '{{ random(["Nope!", "Not quite!"]) }}'
        - set: 'percentage = (score / counter) * 100'
        - sendText: >
                    {% if counter % 10 == "0" %} "You have scored {{ percentage | round }} percent. "{% endif %}
        - sendText: >  
               " Try Again! "
               <audio src="https://onlinepiano1.s3-us-west-1.amazonaws.com/{{ interval[first_random_interval].question }}.mp3"/>
               <audio src="https://onlinepiano1.s3-us-west-1.amazonaws.com/{{ interval[second_random_interval].question }}.mp3"/>
    
        - getInput:
      next:
        answer_intent: Check Answer
        next_q: Next Question
        repeat_q: Repeat
        
    - name: Next Question
      actions:
        - sendText: '{{ random(["Ok!", "Sure Thing!", "You got this!"]) }}'
      next: Question
      
    - name: Repeat
      actions:
        - sendText: "Ok, here's the interval again."
        - sendText: >  
               <audio src="https://onlinepiano1.s3-us-west-1.amazonaws.com/{{ interval[first_random_interval].question }}.mp3"/>
               <audio src="https://onlinepiano1.s3-us-west-1.amazonaws.com/{{ interval[second_random_interval].question }}.mp3"/>
        - getInput:
      next: 
        answer_intent: Check Answer
        repeat_q: Repeat
        next_q: Next Question
      
    - name: Try Again
      actions:
        - sendText: 'Try saying an interval name, for example you could say, tritone, or, minor third.'
        - sendText: 'Are you ready to try again?'
        - getInput:
      next: 
        ok_great: Question
        no_q: Exit
      
    - name: Score
      entrypoint: true
      actions:
        - sendText: "You have scored {{ percentage | round }} percent correct."
        - sendText: > 
                    <break time="1s"/>
        - sendText: "Ready to hear another interval?"
        - getInput:
      next:
        ok_great: Question
        no_q: Exit
      
      
    - name: Exit
      entrypoint: true
      actions:
        - sendText: 'Ok, come back soon!'

    - name: Help
      entrypoint: true
      actions:
        - sendText: 'Ascending and descending intervals will play at random, identify the interval. You can ask to repeat or skip an interval. Remember, the interval between a fourth and a fifth is a tritone. Say score at any time to hear your score. Are you ready?'
        - getInput:
      next:
        ok_great: Question
        no_q: Exit